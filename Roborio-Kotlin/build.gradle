import edu.wpi.first.gradlerio.GradleRIOPlugin
import edu.wpi.first.gradlerio.frc.FRCJavaArtifact
import edu.wpi.first.gradlerio.frc.RoboRIO


plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.3.11"
    id "edu.wpi.first.GradleRIO" version "2019.4.1"
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"


ext.kotlinVersion = "1.3.11"
ext.sertainVersion = "8960bf5379a81b653ca6c86afbbdf396251e6e67"
ext.ktlintVersion = "0.19.0"

check.dependsOn "ktlint"
tasks.whenTaskAdded { task ->
    if (task.name == "deploy" || task.name == "deployMain") task.dependsOn "assemble"
}


// Maven central needed for JUnit
repositories {
    google()
    jcenter()
    maven { url "https://jitpack.io" }
    mavenCentral()
}

configurations {
    ktlint
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.sert2521.sertain:core:$sertainVersion"
    ktlint "com.github.shyiko:ktlint:$ktlintVersion"

    compile fileTree(include: ['*.jar'], dir: 'jars')

    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile 'junit:junit:4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        // Rio co-processor target
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(6325)
        }
    }
    artifacts {
        // Rio co-processor artifact
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

/* Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
in order to make them all available at runtime. Also adding the manifest so WPILib
knows where to look for our Robot Class. */
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

wrapper {
    gradleVersion = "5.1"
}
